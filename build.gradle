plugins {
    id "com.github.node-gradle.node" version '2.2.4'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
}

group = 'dev.minguinho'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    okHttpVersion = '4.4.0'
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okHttpVersion}"
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // AWS
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.820'
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testCompile group: 'io.findify', name: 's3mock_2.12', version: '0.2.5'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

editorconfig {
    excludes = ['build', 'client', '.zeze-checkstyle.xml', 'src/main/resources/static/']
}

checkstyle {
    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail을 내고 싶다면 이 선언을 추가한다.
    configFile = file("${rootDir}/.zeze-checkstyle.xml")
    toolVersion = "8.34"  // checkstyle 버전 8.24 이상 선언
}

check.dependsOn editorconfigCheck

node {
    version = '12.18.2'
    download = false // temporary
    distBaseUrl = 'https://nodejs.org/dist'
    workDir = file("${projectDir}/.gradle/nodejs")
    yarnWorkDir = file("${projectDir}/.gradle/yarn")
    nodeModulesDir = file("${rootDir}/client/")
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

task yarnBuild(type: YarnTask) {
    args = ['run', "build"]
}

task deleteStatic(type: Delete) {
    delete("${projectDir}/src/main/resources/static/")
}

task copyBuild(type: Copy) {
    from("${rootDir}/client/build/")
    into("${projectDir}/src/main/resources/static/")
    includeEmptyDirs = true
}

task buildClient {
    dependsOn 'yarnInstall'
    dependsOn 'yarnBuild'
    dependsOn 'deleteStatic'
    dependsOn 'copyBuild'
    tasks.findByName('yarnBuild').mustRunAfter 'yarnInstall'
    tasks.findByName('deleteStatic').mustRunAfter 'yarnBuild'
    tasks.findByName('copyBuild').mustRunAfter 'deleteStatic'
}
